Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOL
    DEF
    DIVIDE
    ELSE
    EQUAL
    EQUALITY
    EXTERN
    FALSE
    GREATER
    IF
    LBRACE
    LBRACKET
    LESS
    LPAREN
    MINUS
    NOT
    NUMBER
    OR
    PLUS
    PRINT
    RBRACE
    RBRACKET
    RETURN
    RPAREN
    SEMICOLON
    SLIT
    TIMES
    TRUE
    WHILE

Grammar

Rule 0     S' -> TDECLS
Rule 1     TDECLS -> TYPE
Rule 2     TDECLS -> TYPE COMMA TDECLS
Rule 3     VDECLS -> VDECL COMMA VDECLS
Rule 4     VDECLS -> VDECL
Rule 5     VDECL -> TYPE VARID
Rule 6     VARID -> DOLLAR ID
Rule 7     GLOBID -> ID
Rule 8     TYPE -> INT
Rule 9     TYPE -> FLOAT
Rule 10    TYPE -> CINT
Rule 11    TYPE -> VOID
Rule 12    TYPE -> REF TYPE
Rule 13    TYPE -> NOALIAS REF TYPE

Terminals, with rules where they appear

AND                  : 
BOOL                 : 
CINT                 : 10
COMMA                : 2 3
DEF                  : 
DIVIDE               : 
DOLLAR               : 6
ELSE                 : 
EQUAL                : 
EQUALITY             : 
EXTERN               : 
FALSE                : 
FLOAT                : 9
GREATER              : 
ID                   : 6 7
IF                   : 
INT                  : 8
LBRACE               : 
LBRACKET             : 
LESS                 : 
LPAREN               : 
MINUS                : 
NOALIAS              : 13
NOT                  : 
NUMBER               : 
OR                   : 
PLUS                 : 
PRINT                : 
RBRACE               : 
RBRACKET             : 
REF                  : 12 13
RETURN               : 
RPAREN               : 
SEMICOLON            : 
SLIT                 : 
TIMES                : 
TRUE                 : 
VOID                 : 11
WHILE                : 
error                : 

Nonterminals, with rules where they appear

GLOBID               : 
TDECLS               : 2 0
TYPE                 : 1 2 5 12 13
VARID                : 5
VDECL                : 3 4
VDECLS               : 3

Parsing method: LALR

state 0

    (0) S' -> . TDECLS
    (1) TDECLS -> . TYPE
    (2) TDECLS -> . TYPE COMMA TDECLS
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (10) TYPE -> . CINT
    (11) TYPE -> . VOID
    (12) TYPE -> . REF TYPE
    (13) TYPE -> . NOALIAS REF TYPE

    INT             shift and go to state 3
    FLOAT           shift and go to state 4
    CINT            shift and go to state 5
    VOID            shift and go to state 6
    REF             shift and go to state 7
    NOALIAS         shift and go to state 8

    TDECLS                         shift and go to state 1
    TYPE                           shift and go to state 2

state 1

    (0) S' -> TDECLS .



state 2

    (1) TDECLS -> TYPE .
    (2) TDECLS -> TYPE . COMMA TDECLS

    $end            reduce using rule 1 (TDECLS -> TYPE .)
    COMMA           shift and go to state 9


state 3

    (8) TYPE -> INT .

    COMMA           reduce using rule 8 (TYPE -> INT .)
    $end            reduce using rule 8 (TYPE -> INT .)


state 4

    (9) TYPE -> FLOAT .

    COMMA           reduce using rule 9 (TYPE -> FLOAT .)
    $end            reduce using rule 9 (TYPE -> FLOAT .)


state 5

    (10) TYPE -> CINT .

    COMMA           reduce using rule 10 (TYPE -> CINT .)
    $end            reduce using rule 10 (TYPE -> CINT .)


state 6

    (11) TYPE -> VOID .

    COMMA           reduce using rule 11 (TYPE -> VOID .)
    $end            reduce using rule 11 (TYPE -> VOID .)


state 7

    (12) TYPE -> REF . TYPE
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (10) TYPE -> . CINT
    (11) TYPE -> . VOID
    (12) TYPE -> . REF TYPE
    (13) TYPE -> . NOALIAS REF TYPE

    INT             shift and go to state 3
    FLOAT           shift and go to state 4
    CINT            shift and go to state 5
    VOID            shift and go to state 6
    REF             shift and go to state 7
    NOALIAS         shift and go to state 8

    TYPE                           shift and go to state 10

state 8

    (13) TYPE -> NOALIAS . REF TYPE

    REF             shift and go to state 11


state 9

    (2) TDECLS -> TYPE COMMA . TDECLS
    (1) TDECLS -> . TYPE
    (2) TDECLS -> . TYPE COMMA TDECLS
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (10) TYPE -> . CINT
    (11) TYPE -> . VOID
    (12) TYPE -> . REF TYPE
    (13) TYPE -> . NOALIAS REF TYPE

    INT             shift and go to state 3
    FLOAT           shift and go to state 4
    CINT            shift and go to state 5
    VOID            shift and go to state 6
    REF             shift and go to state 7
    NOALIAS         shift and go to state 8

    TYPE                           shift and go to state 2
    TDECLS                         shift and go to state 12

state 10

    (12) TYPE -> REF TYPE .

    COMMA           reduce using rule 12 (TYPE -> REF TYPE .)
    $end            reduce using rule 12 (TYPE -> REF TYPE .)


state 11

    (13) TYPE -> NOALIAS REF . TYPE
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (10) TYPE -> . CINT
    (11) TYPE -> . VOID
    (12) TYPE -> . REF TYPE
    (13) TYPE -> . NOALIAS REF TYPE

    INT             shift and go to state 3
    FLOAT           shift and go to state 4
    CINT            shift and go to state 5
    VOID            shift and go to state 6
    REF             shift and go to state 7
    NOALIAS         shift and go to state 8

    TYPE                           shift and go to state 13

state 12

    (2) TDECLS -> TYPE COMMA TDECLS .

    $end            reduce using rule 2 (TDECLS -> TYPE COMMA TDECLS .)


state 13

    (13) TYPE -> NOALIAS REF TYPE .

    COMMA           reduce using rule 13 (TYPE -> NOALIAS REF TYPE .)
    $end            reduce using rule 13 (TYPE -> NOALIAS REF TYPE .)

